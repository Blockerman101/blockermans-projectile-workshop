import "structs.del";

globalvar ProjDestructor[] projDestructor = []; 

rule: '[BMPW] Destructor - Add filler values'
Event.OngoingGlobal
if (TotalTimeElapsed() >= projDestructor.First.time && projDestructor.Length)
{
    Number ID: projDestructor.First.ID;
    DestroyEffect(projData_VFX[ID]);
    projData[ID].ProjState = projectileStates.Inactive;
    projDestructor.ModRemoveByIndex(0);
    MinWait();
    LoopIfConditionIsTrue();
}

Any cond: projData.All(v => v.ProjState == projectileStates.Inactive || !CurrentArrayIndex()) && projData.Length > 1; //If all real projectiles are Inactive
rule: '[BMPW] Destructor - Clear Projectile Data'
Event.OngoingGlobal
if (cond)
{
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    DestroyEffect(projData_VFX);
    projData = [ProjData.Construct()];
    projData_VFX = [0];
    projConstructor = [];
    constructorData = [EmptyArray()];
    projDestructor = [];
    lastProjectileID = 0;
}