import "projConstructor.del";

globalvar private RaycastPositions tempPositions;
globalvar private Number j;

rule: '[BMPW] Detect Collision'
Event.OngoingGlobal
if (timeInInterval.Length)
if (timeInInterval.Any(v => approxEqual(v.Time, intervalOffset, 0.008)))
{
    TimeInInterval[] toCheck: timeInInterval.Filter(v => approxEqual(v.Time, intervalOffset, 0.008));
    Number i = 0;
    TimeInInterval current: toCheck[i];
    for (i; i < toCheck.Length; i++) 
    {
        checkECollision(current.ID, interval, Color.Red, BeamType.GoodBeam);
    }
    MinWait();
    LoopIfConditionIsTrue();
}

rule: '[BMPW] Initial Environment Collision'
Event.OngoingGlobal
if (projData.Any(v => v.ProjState == projectileStates.Constructing))
{
    for (Number i = 1; i <= projData.Length - 1; i++)
    {
        if (projData[i].ProjState == projectileStates.Constructing)
        {
            Number time: projData[i].RarelyChange.temp;
            projData[i].ProjState = projectileStates.Active;
            if (time > 0)
            {
//                LogToInspector($"First Check Proposed, Went Through! [ID: {i}, interval: {time}]");
                checkECollision(i, time, Color.SkyBlue, BeamType.BadBeam); //The original value of TimeToMaxHeight%interval, before it was translated to the global TII
            }

//            else {LogToInspector($"First Check Proposed, Stopped! [ID: {i}, interval: {time}]");}
        }
    }
    MinWait();

    LoopIfConditionIsTrue();
}

Boolean approxEqual(in Number one, in Number two, in Number leniency): ((one - two).Abs() <= leniency);
Number interval: 0.5; //How often to check for collision
Number intervalOffset: TotalTimeElapsed()%interval;
Number rayCastCount: 2;

private void checkECollision(in Number ID, in Number interval, in Color color, BeamType beamType) {
//    LogToInspector($"coll checked! (ID: {ID}, CurrentTII: {intervalOffset}, interval: {interval}, TTE: {TotalTimeElapsed()})");
    for (j = 1; j <= rayCastCount; j++) //how many raycasts to use/what raycast your on
    {
        tempPositions.StartPosition = projData[ID].PositionAtTime(LinearInterpolate(0, interval, (j-1)/rayCastCount));
        tempPositions.EndPosition = projData[ID].PositionAtTime(LinearInterpolate(0, interval, j/rayCastCount));
        tempPositions.RaycastPosition = RayCastHitPosition(tempPositions.StartPosition, tempPositions.EndPosition, null, null, true);
        Vector position: tempPositions.StartPosition;
        Vector endPosition: tempPositions.EndPosition;
        Vector raycast: tempPositions.RaycastPosition;
    //  if (raycast == Vector.Zero) {
    //      LogToInspector("!-- ERROR --!");
    //      LogToInspector($"Proj. ID: {i}");
    //      LogToInspector($"Trial: {j}");
    //      LogToInspector($"Ray Cast: {j}");
    //  }
        Boolean subdividedCollided: raycast != endPosition;
        CreateEffect(HostPlayer(), Effect.Sphere, color, position, 0.25, EffectRev.None);
        CreateBeamEffect(HostPlayer(), beamType, position, raycast, Color.Red, EffectRev.None);
        CreateEffect(HostPlayer(), Effect.Sphere, color, raycast, 0.25, EffectRev.None);
//        if ([position, endPosition, raycast].IsTrueForAny(v => v == Vector.Zero)) {LogToInspector($"POSITIONS REGISTERED ZERO");}
        if (subdividedCollided) 
        {
            //ProjDestructor.Queue(ID, LinearInterpolate((j-1)/rayCastCount, j/rayCastCount, (position.DistanceTo(raycast)/position.DistanceTo(endPosition)) * interval)); 
            ProjDestructor.Queue(ID, interval * LinearInterpolate((j-1)/rayCastCount, j/rayCastCount, (position.DistanceTo(raycast)/position.DistanceTo(endPosition)))); //Cant add an offset for visuals because it would mess up ricochets
            break;
        } //stop raycasting if the latest one hit
    }
}