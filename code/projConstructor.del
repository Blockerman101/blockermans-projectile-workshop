//import "../../../Other/extraFunctions.ostw";
import "structs.del";
import "environmentCollision.del";
Vector | Number lerp2(in Vector | Number a, in Vector | Number b, in Number t, in Number tMax): ((tMax - t)/tMax)*a + (t/tMax)*b;
//lerp2(1, 5, 0.75, 1) = (1-0.75)*1 + (0.75)*5 = 0.25 + 3.75 = 4 "4 is 75% of the way from 1 to 5"
//lerp2(1, 5, 1, 2) = 1(2 - 1)/2 + 5(1/2) = 1(0.5) + 5(0.5) = 0.5 + 2.5 = 3 



globalvar Number lastProjectileID = 0;
globalvar ProjData[] projData = [ProjData.Construct()];
globalvar Number[] projData_VFX = [null];
globalvar ProjectileArgs[] projConstructor = [];
globalvar ProjectileArgs[] constructorData = [EmptyArray()];
globalvar TimeInInterval[] timeInInterval = [];

void CreateCustomProjectile(ProjectileArgs Args) "[BMPW] CreateProj Sub"
{
    //if (projData.Any(v => v.ProjState == projectileStates.Inactive))
    if (IsTrueForAny(projData.Map(v => v.ProjState), ArrayElement() == projectileStates.Inactive))
    {
        lastProjectileID = projData.Map(v => v.ProjState == projectileStates.Inactive ? CurrentArrayIndex() : false).Filter(v => v).First;
    }
    else
    {
        lastProjectileID = projData.Length;
    }
    //Args.ProjID = lastProjectileID;
    Args.ProjID = lastProjectileID;
    //LogToInspector($"Last ID: {lastProjectileID}");
    projConstructor.ModAppend(Args);
}

//Number maxTime: 3;

rule: '[BMPW] Constructor - 1'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(1);
}

rule: '[BMPW] Constructor - 2'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(2);
}

rule: '[BMPW] Constructor - 3'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(3);
}

rule: '[BMPW] Constructor - 4'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(4);
}

rule: '[BMPW] Constructor - 5'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(5);
}

Any ConstructorQueued(): projConstructor.Length;
//ref ProjectileArgs Args
void ConstructorConstructor(in Number constructorID) 
{
    //ProjectileArgs Args: projConstructor.Filter(v => projData[v].ProjState == projectileStates.Open || projData[v.ProjID].ProjState == null).First;
    ProjectileArgs Args: constructorData[constructorID];
    Any ID: Args.GetID();
    //Args = projConstructor.Filter(v => projData[v.GetID()].ProjState == projectileStates.Open || projData[v.ProjID].ProjState == null).First;

    Number time: (TotalTimeElapsed() - projData[EvaluateOnce(ID)].TimeOfCreation);
    
    //Number rubberbandedTime: TotalTimeElapsed() - (0.016*11 * Args.Speed / 100);
    //experiment with this ^
    Number rubberbandedTime: TotalTimeElapsed();

    constructorData[constructorID] = projConstructor.First; //set data
    projConstructor.ModRemoveByIndex(0); //truncate projConstructor
    if (CountOf(Args)) //ensure projectile has info
    {
        Vector normalDir: Args.Direction.Normalize();
        ProjData data: {
            TimeOfCreation: rubberbandedTime, 
            RarelyChange: {
                Bezierp0: (Args.StartPosition), 
                Bezierp1: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * normalDir) * 0.5, 
                Bezierp2: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * normalDir) + (Args.Lifetime)^2 * (Args.Gravity / 2),
                RicochetCount: 0,
                temp: (-1 * Args.Speed * DotProduct(normalDir, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity))%interval
                }, 
            ProjState: projectileStates.Constructing, 
            ReadOnly: {
                Targets: Args.AffectedPlayers,
                Velocity: Args.Speed * normalDir,
                Gravity: Args.Gravity,
                }
            };
            //Set temp to TimeToMaxHeight (est. time ~0.02s)

        projData[ID] = data;
        Number ProjTime: (TotalTimeElapsed() + Max(0, -1 * Args.Speed * DotProduct(normalDir, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity)));
        Number ProjTick: (((ProjTime%interval) / 0.016).Floor());
        TimeInInterval.Queue(ID, ProjTick);
        LogToInspector($"\nAdded to TII (ID: {ID})\nCurrentTick: {currentTick}, ProjTick: {ProjTick}\nCurrentIndex: {intervalIndex}, ProjIndex: {timeInInterval.Map(v => v.ID).IndexOf(ID)}]\n");
        
        //Translate intervalIndex
        //if (timeInInterval.Length > 1 && timeInInterval.Map(v => v.ID).IndexOf(ID) <= intervalIndex) {LogToInspector($"Inc'd Index. (Index {timeInInterval.Map(v => v.ID).IndexOf(ID)} with ID {ID}, Index: {intervalIndex} -> {intervalIndex + 1})"); intervalIndex++;}
        
        //Increment if this wasnt the first proj added to the struct, and if the current index already checked EC
        Boolean[] reqsForInc: [
            timeInInterval.Length > 1,
            //intervalIndex, 
            //(timeInInterval[intervalIndex].Time <= timeInInterval || timeInInterval.Map(v => v.ID).IndexOf(ID) <= intervalIndex),
            //timeInInterval.Map(v => v.ID).IndexOf(ID) <= intervalIndex //needs to be <=
            currentTick > ProjTick //Cases of current == proj are handled by the first check
            //timeInInterval.Map(v => v.ID).IndexOf(ID) < intervalIndex
            //timeInInterval.Map(v => v.ID).IndexOf(ID) <= intervalIndex || ProjTick <= (currentTick - 0.016) //The to-be-added projs TII needs to be less than the current TII
        ];

        if (IsTrueForAll(reqsForInc, ArrayElement())) {LogToInspector($"Inc'd Index. (Index {timeInInterval.Map(v => v.ID).IndexOf(ID)} with ID {ID}, Index: {intervalIndex} -> {intervalIndex + 1})"); intervalIndex++;}

        Wait(ServerLoadAverage()/512);
        //CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(b0), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(projData[EvaluateOnce(ID)].Position), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        projData_VFX[ID] = LastCreatedEntity();
        ProjDestructor.Queue(ID, Args.Lifetime);

        Wait(ServerLoadAverage()/512);

        //As it stands, there needs to be a wait between spawning the projectile, and truncating the queue
        //You cant use 
    }
    else //create projectile with default info
    {
        LogToInspector("else fired");
    }
    //After called

    //MinWait();
    LoopIfConditionIsTrue();
}