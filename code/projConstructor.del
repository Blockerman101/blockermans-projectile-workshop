//import "../../../Other/extraFunctions.ostw";
import "structs.del";
import "environmentCollision.del";
Vector | Number lerp2(in Vector | Number a, in Vector | Number b, in Number t, in Number tMax): ((tMax - t)/tMax)*a + (t/tMax)*b;
//lerp2(1, 5, 0.75, 1) = (1-0.75)*1 + (0.75)*5 = 0.25 + 3.75 = 4 "4 is 75% of the way from 1 to 5"
//lerp2(1, 5, 1, 2) = 1(2 - 1)/2 + 5(1/2) = 1(0.5) + 5(0.5) = 0.5 + 2.5 = 3 



globalvar Number lastProjectileID = 0;
globalvar ProjData[] projData = [ProjData.Construct()];
globalvar Number[] projData_VFX = [null];
globalvar ProjectileArgs[] projConstructor = [];
//globalvar ProjectileArgs[] constructorData = [EmptyArray()];  //This var isnt be needed with 1 constructor, you can just ref `projConstructor.First`
globalvar TimeInInterval[] timeInInterval = [];

void CreateCustomProjectile(ProjectileArgs Args) "[BMPW] CreateProj Sub"
{
    //if (projData.Any(v => v.ProjState == projectileStates.Inactive))
    if (IsTrueForAny(projData.Map(v => v.ProjState), ArrayElement() == projectileStates.Inactive)) //Make new lastProjID
    {
        lastProjectileID = projData.Map(v => v.ProjState == projectileStates.Inactive ? CurrentArrayIndex() : false).Filter(v => v).First;
    }
    else
    {
        lastProjectileID = projData.Length;
    }
    //Args.ProjID = lastProjectileID;
    Args._SetID(lastProjectileID);
    Args._SetTOC(TotalTimeElapsed());
    projData[lastProjectileID].ProjState = projectileStates.NULL; //setting a projstate value so `lastProjectileID = projData.Length` increments correctly with >1 proj in a single tick
    

    //LogToInspector($"Last ID: {lastProjectileID}");
    projConstructor.ModAppend(Args); //Add this proj call to the construction queue
}

rule: '[BMPW] Constructor'
Event.OngoingGlobal
if (projConstructor.Length)
{
    ProjectileArgs Args: projConstructor.First;
    Any ID: Args._GetID();
    Number deltaT: (TotalTimeElapsed() - Args._GetTOC()); //deltaT is not the time since the last tick, but the time that passed since this proj was called
    Number ModdedTimeToMaxHeight: (-1 * Args.Speed * DotProduct(Args.Direction, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity))%interval;
    //This is useful because instead of making the projectile at the current time, I can buffer it to act as if it was created at its time of call

    //Number rubberbandedTime: TotalTimeElapsed() - (0.016*11 * Args.Speed / 100);
    //experiment with this ^
    Number rubberbandedTime: (TotalTimeElapsed() - deltaT); //buffer current time using deltaT for reason above ^
    Number time: (rubberbandedTime - projData[EvaluateOnce(ID)].TimeOfCreation);
    if (CountOf(Args)) //ensure projectile has info
    {
        projConstructor[0].Direction = projConstructor[0].Direction.Normalize(); //Normalize dir internally (redundancy) //For reference, if you do .First instead of [0] OSTW throws an error
        ProjData data: {
            TimeOfCreation: rubberbandedTime,  //This is used as the reference for other time-based values, so by modifying this, you modify everything else
            RarelyChange: {
                Bezierp0: (Args.StartPosition), 
                Bezierp1: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) * 0.5, 
                Bezierp2: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) + (Args.Lifetime)^2 * (Args.Gravity / 2),
                RicochetCount: 0
                }, 
            ProjState: projectileStates.Active, 
            ReadOnly: {
                Targets: Args.AffectedPlayers,
                Velocity: Args.Speed * Args.Direction,
                Gravity: Args.Gravity,
                }
            };

        projData[ID] = data;
        Number ProjTime: (TotalTimeElapsed() + Max(0, -1 * Args.Speed * DotProduct(Args.Direction, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity)));
        Number ProjTick: (((ProjTime%interval) / 0.016).Floor());
        TimeInInterval.Queue(ID, ProjTick);
        LogToInspector($"\nAdded to TII (ID: {ID})\nCurrentTick: {currentTick}, ProjTick: {ProjTick}\nCurrentIndex: {intervalIndex}, ProjIndex: {timeInInterval.Map(v => v.ID).IndexOf(ID)}]\n");
        if (timeInInterval.Length > 1 && currentTick > ProjTick) {LogToInspector($"Inc'd Index. (Index {timeInInterval.Map(v => v.ID).IndexOf(ID)} with ID {ID}, Index: {intervalIndex} -> {intervalIndex + 1})"); intervalIndex++;}
        
        Wait(ServerLoadAverage() >= 200 ? 0.032 : 0.016);
        
        CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(projData[EvaluateOnce(ID)].Position), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * projData[EvaluateOnce(ID)].time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        projData_VFX[ID] = LastCreatedEntity();
        LogToInspector($"Proj {ID} Created\ndeltaT: {deltaT}");
        checkECollision(ID, ModdedTimeToMaxHeight, Color.SkyBlue, BeamType.GoodBeam); //First EC
        ProjDestructor.Queue(ID, Args.Lifetime - deltaT);

        
        Wait(ServerLoadAverage() >= 150 ? 0.032 : 0.016); //If the server load is on the higher side, limit the constructor rate so THE BUG happens less
    
    }
    else
    {
        LogToInspector("else fired"); //This else will happen if a proj is queued without any info for args
    }

    projConstructor.ModRemoveByIndex(0); //All done with first in queue, get ready for next
    LoopIfConditionIsTrue();
}