//import "../../../Other/extraFunctions.ostw";
import "structs.del";
Vector | Number lerp2(in Vector | Number a, in Vector | Number b, in Number t, in Number tMax): ((tMax - t)/tMax)*a + (t/tMax)*b;
//lerp2(1, 5, 0.75, 1) = (1-0.75)*1 + (0.75)*5 = 0.25 + 3.75 = 4 "4 is 75% of the way from 1 to 5"
//lerp2(1, 5, 1, 2) = 1(2 - 1)/2 + 5(1/2) = 1(0.5) + 5(0.5) = 0.5 + 2.5 = 3 



globalvar Number lastProjectileID = 0;
globalvar ProjData[] projData = [ProjData.Construct()];
globalvar Number[] projData_VFX = [0];
globalvar ProjectileArgs[] projConstructor = [];
globalvar ProjectileArgs[] constructorData = [EmptyArray()];

void CreateCustomProjectile(ProjectileArgs Args) "[BMPW] CreateProj Sub"
{
    lastProjectileID++;
    //Args.ProjID = lastProjectileID;
    Args.ProjID = lastProjectileID;
    projConstructor.ModAppend(Args);
}

//Number maxTime: 3;

rule: '[BMPW] Constructor - 1'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(1);
}

rule: '[BMPW] Constructor - 2'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(2);
}

rule: '[BMPW] Constructor - 3'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(3);
}

rule: '[BMPW] Constructor - 4'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(4);
}

rule: '[BMPW] Constructor - 5'
Event.OngoingGlobal
if (ConstructorQueued())
{
    ConstructorConstructor(5);
}

Any ConstructorQueued(): projConstructor.Length;
//ref ProjectileArgs Args
void ConstructorConstructor(in Number constructorID) 
{
    //ProjectileArgs Args: projConstructor.Filter(v => projData[v].ProjState == projectileStates.Open || projData[v.ProjID].ProjState == null).First;
    ProjectileArgs Args: constructorData[constructorID];
    Any ID: Args.GetID();
    //Args = projConstructor.Filter(v => projData[v.GetID()].ProjState == projectileStates.Open || projData[v.ProjID].ProjState == null).First;

    Number time: (TotalTimeElapsed() - projData[EvaluateOnce(ID)].TimeOfCreation);
    
    //Number rubberbandedTime: TotalTimeElapsed() - (0.016*11 * Args.Speed / 100);
    //experiment with this ^
    Number rubberbandedTime: TotalTimeElapsed();

    constructorData[constructorID] = projConstructor.First; //set data
    projConstructor.ModRemoveByIndex(0); //truncate projConstructor
    if (CountOf(Args)) //ensure projectile has info
    {

        ProjData data: {
            TimeOfCreation: rubberbandedTime, 
            RarelyChange: {
                Bezierp0: (Args.StartPosition), 
                Bezierp1: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) * 0.5, 
                Bezierp2: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) + (Args.Lifetime)^2 * (Args.Gravity / 2),
                RicochetCount: 0
                }, 
            ProjState: projectileStates.Active, 
            ReadOnly: {
                Targets: Args.AffectedPlayers,
                Velocity: Args.Speed * Args.Direction,
                Gravity: Args.Gravity
                }
            };
        projData.ModAppend(data);
        Wait(ServerLoadAverage()/512);
        //CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(b0), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(projData[EvaluateOnce(ID)].Position), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        projData_VFX.ModAppend(LastCreatedEntity());
        ProjDestructor.Queue(ID, Args.Lifetime);
        Wait(ServerLoadAverage()/512);

        //As it stands, there needs to be a wait between spawning the projectile, and truncating the queue
        //You cant use 
    }
    else //create projectile with default info
    {
        LogToInspector("else fired");
    }
    //After called

    //MinWait();
    LoopIfConditionIsTrue();
}