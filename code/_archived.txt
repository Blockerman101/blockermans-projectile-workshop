void CreateCustomProjectile(ProjectileArgs Args) "[BMPW] CreateProj Sub"
{
    lastProjectileID++;
    Number[] one: [1, projConstructor.Filter(v => v.ConstructorID == 1).Length]; //# of ID-1, enumerated
    Number[] two: [2, projConstructor.Filter(v => v.ConstructorID == 2).Length]; //# of ID-2, enumerated
    Number[] three: [3, projConstructor.Filter(v => v.ConstructorID == 3).Length]; //# of ID-3, enumerated
    Number[] four: [4, projConstructor.Filter(v => v.ConstructorID == 4).Length]; //# of ID-4, enumerated
    Number[] five: [5, projConstructor.Filter(v => v.ConstructorID == 5).Length]; //# of ID-5, enumerated
    Any[] sorted2: [one, two, three, four, five].Sort(v => v[1]); //the above arrays, sorted based on size of queue lowest -> highest
    Number ID: sorted2.First[0]; //The constructor ID with the lowest amount of queues
    LogToInspector($"one: {one[1]}");
    LogToInspector($"two: {two[1]}");
    LogToInspector($"three: {three[1]}");
    LogToInspector($"four: {four[1]}");
    LogToInspector($"five: {five[1]}");
    LogToInspector($"Constructor: {ID}");
    Args.ProjID = lastProjectileID;
    projConstructor.ModAppend({args: Args, ConstructorID: ID});
}



disabled rule: '[BMPW] Constructor - 1'
Event.OngoingGlobal
if (projConstructor.Filter(v => v.ConstructorID == 1).Length) //If there are any calls for the constructor with ID 1  //This0360
{
    ProjConstructor current: projConstructor.Filter(v => v.ConstructorID == 1).First; //This0360
    ProjectileArgs Args: projConstructor.Filter(v => v.ConstructorID == 1).First.args; //This0360
    //projConstructsInUse[1] = true;
    Number time: (TotalTimeElapsed() - projData[EvaluateOnce(Args.GetID())].TimeOfCreation);
    Vector a0: lerp2(projData[EvaluateOnce(Args.GetID())].Bezierp0, projData[EvaluateOnce(Args.GetID())].Bezierp1, time, 7);
    Vector a1: lerp2(projData[EvaluateOnce(Args.GetID())].Bezierp1, projData[EvaluateOnce(Args.GetID())].Bezierp2, time, 7);
    Vector b0: lerp2(a0, a1, time, 7);

    
    if (CountOf(Args)) //ensure projectile has info
    {
        ProjData data: {TimeOfCreation: TotalTimeElapsed(), Bezierp0: (Args.StartPosition), Bezierp1: (Args.StartPosition) + maxTime*(Args.Speed * Args.Direction) * 0.5, Bezierp2: (Args.StartPosition) + maxTime*(Args.Speed * Args.Direction) + maxTime^2 * (Args.Gravity / 2), Direction: Args.Direction, ProjState: projectileStates.InUse, VFX: 0};
//        if (projData.Any(v => v.ProjState == projectileStates.Open)) //If a previously made index isn't being used, use that index instead of making another
//        {
//            Args.GetID() = projData.Map(v => v.ProjState == projectileStates.Open ? CurrentArrayIndex() : 0).Filter(v => v).First; //Take the first non-zero index
//            projData[Args.GetID()] = data;
//            //projData[Args.GetID()].TimeOfCreation = TotalTimeElapsed(); //time must be set before control points are set, because they utilize that updated time value
//            //projData[Args.GetID()].Bezierp0 = (Args.StartPosition); //starting pos
//            //projData[Args.GetID()].Bezierp1 = (Args.StartPosition) + maxTime*(Args.Speed * Args.Direction) * 0.5; //starting pos + velocity * 0.5
//            //projData[Args.GetID()].Bezierp2 = (Args.StartPosition) + maxTime*(Args.Speed * Args.Direction) + maxTime^2 * (Args.Gravity / 2); //starting pos + velocity + acceleration
//            //projData[Args.GetID()].Direction = Args.Direction;
//            //projData[Args.GetID()].ProjState = projectileStates.InUse;
//            //projData[Args.GetID()].VFX = 0;
//            LogToInspector($"If fired! (Size: {projData.Length})");
//        }
//        else //this should always be appending for now, since the projectiles dont despawn yet
//        {
//            lastProjectileID = projData.Length; //no +1 here
//            projData.ModAppend(data);
//   
//           
//        }
//        MinWait();
//        //Wait(ServerLoadPeak()/256);
//        CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(b0), projData[EvaluateOnce(Args.GetID())].Direction * EvaluateOnce(Args.Speed) + EvaluateOnce(Args.Gravity) * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
//        //CreateEffect(AllPlayers(), Effect.LightShaft, Color.White, UpdateEveryFrame(b0), 0.5, EffectRev.PositionAndRadius);
//        projData[Args.GetID()].VFX = LastCreatedEntity();
//        Wait(ServerLoadPeak()/128);
        projData.ModAppend(data);
        MinWait();
        CreateProjectileEffect(AllPlayers(), ProjectileType.BaptisteBioticLauncher, AllPlayers(), UpdateEveryFrame(b0), projData[EvaluateOnce(Args.GetID())].Direction * EvaluateOnce(Args.Speed) + EvaluateOnce(Args.Gravity) * time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
        projData[Args.GetID()].VFX = LastCreatedEntity();
        Wait(ServerLoadPeak()/256);
    }
    

    else //create projectile with default info
    {
        LogToInspector("else fired");
    }
    //After called
    projConstructor.ModRemoveByValue({args: Args, ConstructorID: 1});  //This0360
    projConstructsInUse[1] = false;  //This0360
    MinWait();
    LoopIfConditionIsTrue();
}



disabled rule: '[BMPW] Constructor Call Manager (Producer/Consumer)'
Event.OngoingGlobal
if (unassignedProjQueue.Length)
if (projConstructsInUse.Filter(v => !v).Length)
{
    ProjectileArgs first: unassignedProjQueue.First;

    Number ID: projConstructsInUse.Map(v => !v ? CurrentArrayIndex() : 0).Filter(v => v).First;
    //projConstructor.ModAppend({args: first, ConstructorID: ID});
    projConstructsInUse[ID] = true;
    //lastProjectileID = projData.Any(v => v.ProjState == projectileStates.Open) ? projData.Map(v => v.ProjState == projectileStates.Open ? CurrentArrayIndex() : 0).Filter(v => v).First : projData.Length;
    unassignedProjQueue.ModRemoveByIndex(0);
    MinWait();
    LoopIfConditionIsTrue();
}

disabled rule: '[BMPW] Destructor - Remove Hanging Indices'
Event.OngoingGlobal
if (projData.Last.ProjState == projectileStates.Open)
{
    Number index = projData.Length - 1;
    DestroyEffect(projData[index].VFX);
    projData.ModRemoveByIndex(index);
    //projData.Bezierp0.ModRemoveByIndex(projData.Size() - 1);
    //projData.Bezierp1.ModRemoveByIndex(projData.Size() - 1);
    //projData.Bezierp2.ModRemoveByIndex(projData.Size() - 1);
    //projData.Direction.ModRemoveByIndex(projData.Size() - 1);
    //projData.TimeOfCreation.ModRemoveByIndex(projData.Size() - 1);
    //projData.VFX.ModRemoveByIndex(projData.Size() - 1);
    //projData.ProjState.ModRemoveByIndex(projData.Size() - 1);
    MinWait();
    LoopIfConditionIsTrue();
    

}


import "projCallManager.del";

rule: 'Detect Collision'
Event.OngoingGlobal
if (aliveProjIDs.Length) //Are any projectiles alive right now?
{
    Boolean collided;
    foreach (Number i in aliveProjIDs) //[1, aliveProjIDs.Length] "for every living projectile"
    {
 

//        //Simpler collision detection
//        if (projData[i].ReadOnly.ProjSteepness < steepReqForChecks)
//        {
//            Vector position: projData[i].Position;
//            Vector endPosition: projData[i].PositionAtTime(interval);
//            Vector raycast: RayCastHitPosition(position, endPosition, null, null, true);
//            collided = raycast != endPosition;
//        }

        //More rigorous collision, checks for false positives (Only used on proj's with a steep slope)
//        else
//        {
            for (Number k = 0; k < rayCastCount(i); k++) //how many raycasts to use/what raycast your on
            {
                Vector position: projData[i].PositionAtTime(lerp2(0, interval, k/rayCastCount(i), 1));
                Vector endPosition: projData[i].PositionAtTime(lerp2(0, interval, (k+1)/rayCastCount(i), 1));
                Vector raycast: RayCastHitPosition(position, endPosition, null, null, true);
//              if (raycast == Vector.Zero) {
//                  LogToInspector("!-- ERROR --!");
//                  LogToInspector($"Proj. ID: {i}");
//                  LogToInspector($"Trial: {j}");
//                  LogToInspector($"Ray Cast: {k}");
//              }
                collided = raycast != endPosition;
                if (collided) {break;} //stop raycasting if the latest one hit something
            }
            if (!collided) {break;} //stop raycasting if none of them in the latest phase hit something
        }
//        if (collided) {ProjDestructor.Queue(i); LogToInspector($"Proj. {i} Collided!");}
    }
    WaitUntil(projData.Length != EvaluateOnce(projData.Length), interval);
    LoopIfConditionIsTrue();

}


Number[] aliveProjIDs: projData.Map(v => CurrentArrayIndex()).Filter(v => projData[v].ProjState == projectileStates.Active);
Number interval: 0.5; //How often to check for collision
Number steepReqForChecks: 90; //Barrier for rigorous collision
Number maxSteepness: 180;

Number minRayCastCount: 1; //The minimum amount of raycast to subdivide for rigorous collision
Number maxRayCastCount: 2; //The maximum amount of raycast to subdivide for rigorous collision
Number rayCastCount(Number ID): projData[ID].ReadOnly.ProjSteepness < steepReqForChecks ? minRayCastCount : LinearInterpolate(minRayCastCount, maxRayCastCount, Min(maxSteepness, projData[ID].ReadOnly.ProjSteepness)/maxSteepness).Round();

disabled rule: 'Test destroy'
Event.OngoingGlobal
if (projData.Any(v => TotalTimeElapsed() - v.TimeOfCreation >= v.ReadOnly.Lifetime && v.ProjState == projectileStates.Active))
{
    Number[] times: projData.Map(time => TotalTimeElapsed() - time.TimeOfCreation >= time.ReadOnly.Lifetime && time.ProjState == projectileStates.Active ? CurrentArrayIndex() : null).Filter(v => v); //returns an array of the ID's of all projectiles that are timed out, works by making timed out IDs null, then filter out null IDs
    ProjDestructor.Queue(times.First, 0);
    MinWait();
    LoopIfConditionIsTrue();
}


//in structs
    Number maxTime: (this.ReadOnly.Lifetime);
    Vector p0: this.RarelyChange.Bezierp0;
    Vector p1: this.RarelyChange.Bezierp1;
    Vector p2: this.RarelyChange.Bezierp2;

    Vector a0: lerp2(p0, p1, (time), maxTime);
    Vector a1: lerp2(p1, p2, (time), maxTime);
    Vector b0: lerp2(a0, a1, (time), maxTime);
    Vector a0Time(Number n): ((maxTime - (time) - n)/maxTime * p0 + ((time) + n)/maxTime * p1);
    Vector a1Time(Number n): ((maxTime - (time) - n)/maxTime * p1 + ((time) + n)/maxTime * p2);
    Vector b0Time(Number n): ((maxTime - (time) - n)/maxTime * a0Time(n)) + (((time) + n)/maxTime * a1Time(n));


//in projConstructor
    //Number time: (TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()));

    //Vector a0: lerp2(projData[EvaluateOnce(ID)].ControlPoints.Bezierp0, projData[EvaluateOnce(ID)].ControlPoints.Bezierp1, time, projData[EvaluateOnce(ID)].ReadOnly.Lifetime);
    //Vector a1: lerp2(projData[EvaluateOnce(ID)].ControlPoints.Bezierp1, projData[EvaluateOnce(ID)].ControlPoints.Bezierp2, time, projData[EvaluateOnce(ID)].ReadOnly.Lifetime);
    //Vector b0: lerp2(a0, a1, time, projData[EvaluateOnce(ID)].ReadOnly.Lifetime);
    Number maxTime: (projData[EvaluateOnce(ID)].ReadOnly.Lifetime);
    Vector p0: projData[EvaluateOnce(ID)].RarelyChange.Bezierp0;
    Vector p1: projData[EvaluateOnce(ID)].RarelyChange.Bezierp1;
    Vector p2: projData[EvaluateOnce(ID)].RarelyChange.Bezierp2;

    Vector a0: ((maxTime - time)/maxTime)*p0 + (time/maxTime)*p1;
    Vector a1: ((maxTime - time)/maxTime)*p1 + (time/maxTime)*p2;
    Vector b0: ((maxTime - time)/maxTime)*a0 + (time/maxTime)*a1;

//    BezierPositions:
//        Start Pos
//        Bezierp0: (Args.StartPosition),

//        Start Pos + 1/2 * Final Velocity (no acceleration)
//        Bezierp1: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) * 0.5,

//        Start Pos + Final Velocity + 1/2 * Final Acceleration
//        Bezierp2: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) + (Args.Lifetime)^2 * (Args.Gravity / 2) 
//    };


//in EC
//            if (TotalTimeElapsed() - projData[i].TimeOfCreation > projData[i].ReadOnly.Lifetime) //Queue timed out projectiles
//            {
//                ProjDestructor.Queue(i, 0);
//                continue;
//            }


ProjSteepness: AngleBetweenVectors((Args.StartPosition.DirectionTowards((Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) * 0.5)), (Args.StartPosition.DirectionTowards((Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) + (Args.Lifetime)^2 * (Args.Gravity / 2)))),

//in EC
rule: '[BMPW] Detect Collision' //THIS WHOLE RULE SHOULD BE REDONE
Event.OngoingGlobal
if (timeInInterval.Length) 
if (approxEqual(timeInInterval.First.time, intervalOffset, leniency))
{
    Number i = 0;
    while (approxEqual(timeInInterval[i].time, intervalOffset, leniency) && timeInInterval.Length && intervalOffset > 0)
    {
        TimeInInterval current: timeInInterval[i];
        checkECollision(current.ID, interval, Color.Red, BeamType.GoodBeam);
        i++;
        AbortIf(i >= timeInInterval.Length);
        WaitUntil(approxEqual(current.time, intervalOffset, leniency) || intervalOffset <= 0.01, interval);
    }
//    for (Number i = 1; i <= projData.Length - 1; i++) //inclusive
//    {
//
//        if (projData[i].ProjState == projectileStates.Active) //Only loop through active projectiles
//        {
//            WaitUntil(timeInInterval.First.time <= intervalOffset, interval);

//
//            
//        }
//    }
//    WaitUntil(projData.Length != EvaluateOnce(projData.Length), interval);
//    LoopIfConditionIsTrue();
}


//Attempted EC systems
disabled rule: '[BMPW] Detect Collision' //THIS WHOLE RULE SHOULD BE REDONE
Event.OngoingGlobal
if (timeInInterval.Length) 
if (timeInInterval.First.Time <= intervalOffset)
{
    Number i = 0;
    while (timeInInterval[i].Time <= intervalOffset && i < timeInInterval.Length)
    {
        TimeInInterval current: timeInInterval[i];
        checkECollision(current.ID, interval, Color.Red, BeamType.GoodBeam);
        i++;
        WaitUntil(current.Time <= intervalOffset || intervalOffset <= 0.016, interval - intervalOffset);
        if (intervalOffset <= 0.016) {break;}
    }
}

rule: '[BMPW] Reset Checked Status'
Event.OngoingGlobal
if (timeInInterval.Length)
if (intervalOffset <= 0.016)
{
    timeInInterval = timeInInterval.Map(v => {Checked: false, ..v});
}

disabled rule: '[BMPW] Detect Collision'
Event.OngoingGlobal
if (timeInInterval.Length)
if (timeInInterval.Any(v => (!v.Checked) && approxEqual(v.Time, intervalOffset, 0.016)))
{
    TimeInInterval current = timeInInterval.Filter(v => (!v.Checked) && approxEqual(v.Time, intervalOffset, 0.016)).First;
    checkECollision(current.ID, interval, Color.Red, BeamType.GoodBeam);
    LogToInspector("EC Length: " + timeInInterval.Length);
    LogToInspector("EC Index: " + timeInInterval.IndexOf(current));
    timeInInterval[timeInInterval.IndexOf(current)].Checked = true; //This is broken
    Wait(0.016, WaitBehavior.RestartWhenTrue);
    LoopIfConditionIsTrue();
}


rule: '[DEV] Log TII'
Event.OngoingGlobal
if (timeInInterval.Length != EvaluateOnce(timeInInterval.Length))
{
    LogToInspector("Length: " + timeInInterval.Length);
    for (Number i = 0; i < timeInInterval.Length; i++)
    {
        LogToInspector($"[{i}]: " + timeInInterval[i].Checked + ", "
         + timeInInterval[i].ID + ", "
          + timeInInterval[i].Time);
    }
    WaitUntil(timeInInterval.Length != EvaluateOnce(timeInInterval.Length), 9999);
    LoopIf(timeInInterval.Length);
}

disabled rule: '[DEV] show TII time'
if (timeInInterval.Length)
{
    LogToInspector("First Time: " + timeInInterval.First.Time);
}

//Boolean diff(in Number ID, in Number amount): Min((interval - (timeInInterval[ID].Time + currentTick)).Abs(), (timeInInterval[ID].Time - currentTick).Abs()) <= amount;

rule: '[BMPW] Detect Collision'
if (timeInInterval.Length)
if (diff(intervalIndex))
{

    checkECollision(timeInInterval[intervalIndex].ID, interval, Color.White, BeamType.BadBeam); //Check this projectile
    intervalIndex++; //Go to next projectile
    WaitUntil((diff(intervalIndex) || !currentTick) && intervalIndex < timeInInterval.Length, interval); //Wait until there is a value at timeInInterval[intervalIndex].Time and and the next proj is ready to be checked, or the current lap ended  
    if (!currentTick) {intervalIndex = 0; LogToInspector($"Lap ended. (Index returned to 0) (TTE: {TotalTimeElapsed()})");} //Reset stuff if the lap ended
    LoopIfConditionIsTrue();
}


disabled rule: '[BMPW] Detect Collision'
Event.OngoingGlobal
if (timeInInterval.Length)
if (timeInInterval.Any(v => approxEqual(v.Time, currentTick, 0.008)))
{
    TimeInInterval[] toCheck: timeInInterval.Filter(v => approxEqual(v.Time, currentTick, 0.008));
    Number i = 0;
    TimeInInterval current: toCheck[i];
    for (i; i < toCheck.Length; i++) 
    {
        checkECollision(current.ID, interval, Color.Red, BeamType.GoodBeam);
    }
    MinWait();
    LoopIfConditionIsTrue();
}

rule: '[BMPW] Initial Environment Collision'
Event.OngoingGlobal
if (projData.Any(v => v.ProjState == projectileStates.Constructing))
{
    for (Number i = 1; i <= projData.Length - 1; i++)
    {
        if (projData[i].ProjState == projectileStates.Constructing)
        {
            
            Number time: projData[i].RarelyChange.temp;
            projData[i].ProjState = projectileStates.Active;
            if (time > 0)
            {
//                LogToInspector($"First Check Proposed, Went Through! [ID: {i}, interval: {time}]");
                checkECollision(i, time, Color.SkyBlue, BeamType.GoodBeam); //The original value of TimeToMaxHeight%interval, before it was translated to the global TII
            }

//            else {LogToInspector($"First Check Proposed, Stopped! [ID: {i}, interval: {time}]");}
        }
    }
    MinWait();

    LoopIfConditionIsTrue();
}

rule: 'Make big proj'
Event.OngoingPlayer
if (EventPlayer().IsButtonHeld(Button.PrimaryFire))
{
    
    ProjectileArgs bigProj: {Oversize: 0.2, Speed: 20, Lifetime: 3, TEST_VisualDir: ProjectileArgs.Default().Direction, ..ProjectileArgs.Default()};
//    ProjectileArgs up: {Direction: bigProj.Direction + Up() * 0.2, TEST_VisualDir: Up(), ..bigProj};
//    ProjectileArgs left: {Direction: bigProj.Direction + Left().AsWorldVector(EventPlayer(), Transformation.Rotation) * 0.2, TEST_VisualDir: Left().AsWorldVector(EventPlayer(), Transformation.Rotation), ..bigProj};
//    ProjectileArgs right: {Direction: bigProj.Direction + Right().AsWorldVector(EventPlayer(), Transformation.Rotation) * 0.2, TEST_VisualDir: Right().AsWorldVector(EventPlayer(), Transformation.Rotation), ..bigProj};
//    //for (Number i = 0; i < 3; i++)
//    //{
//    CreateCustomProjectile(bigProj);
//    bigProjIDs.ModAppend(lastProjectileID);
//    CreateCustomProjectile(up);
//    CreateCustomProjectile(left);
//    CreateCustomProjectile(right);

    Number n: 10;

    Vector right: Right().AsWorldVector(EventPlayer(), Transformation.Rotation);
    Vector left: Right().AsWorldVector(EventPlayer(), Transformation.Rotation);
    for (Number i = 0; i < n; i++)
    {
        Number current: (i / (n-1));
        ProjectileArgs projArgs = {
            Direction: EventPlayer().FacingDirection() + DirectionFromAngles(LinearInterpolate(40, -40, current)).AsWorldVector(EventPlayer(), Transformation.Rotation) + Up() * 0.5,
            TEST_VisualDir: Vector(CosineFromDegrees(180*current), SineFromDegrees(180*current),0).AsWorldVector(EventPlayer(), Transformation.Rotation),
            Lifetime: 2,
            ..bigProj
            };
        LogToInspector($"current: {current}, visualDir: {projArgs.TEST_VisualDir}, dir: {projArgs.Direction}");
        CreateCustomProjectile(projArgs);
    }
    //}
    MinWait();
    //LoopIfConditionIsTrue();
}

    ProjectileArgs up: {Direction: bigProj.Direction + Up() * 0.2, ..bigProj};
    ProjectileArgs left: {Direction: bigProj.Direction + Left().AsWorldVector(EventPlayer(), Transformation.Rotation) * 0.2, ..bigProj};
    ProjectileArgs right: {Direction: bigProj.Direction + Right().AsWorldVector(EventPlayer(), Transformation.Rotation) * 0.2, ..bigProj};
    CreateCustomProjectile(up);
    CreateCustomProjectile(left);
    CreateCustomProjectile(right);

structs.del
//    Open, //Projectile was never spawned (not in use currently) [OUTDATED]

simpleProcessing.del
    //Number rubberbandedTime: TotalTimeElapsed() - (0.016*11 * Args.Speed / 100);
    //experiment with this ^
    //Number rubberbandedTime: (TotalTimeElapsed() - deltaT); //buffer current time using deltaT for reason above ^
    //Number rubberbandedTime: (TotalTimeElapsed());


complexProcessing.del
disabled rule: '[BMPW] Player Collision'
if (complexProjs.Length)
{
    Number time: 0.016*2;
    for (_waitlessIterator = 0; _waitlessIterator < complexProjs.Length; _waitlessIterator++)
    {

        //Number ID: complexProjs[EvaluateOnce(_waitlessIterator)]; 
        Number ID: complexProjs[_waitlessIterator]; 
        ProjData proj: projData[ID];

        projData[ID].HitPlayer = RayCastHitPlayer(proj.Position, proj.PositionAtTime(time), proj.ReadOnly.Targets, null, false);
        //PlayEffect(HostPlayer(), PlayEffect.GoodExplosion, Color.White, proj.Position, 0.5);
        //PlayEffect(HostPlayer(), PlayEffect.GoodExplosion, Color.White, proj.PositionAtTime(time), 0.5);
        if (proj.HitPlayer)
        {
            ProjDestructor.Destroy(ID);
            LogToInspector($"Proj {ID} hit {proj.HitPlayer}!");
        }
    }
    Wait(time);
    LoopIfConditionIsTrue();
}

simpleProcessing.del
globalvar private Number fl_j;
private void OLD_checkECollision(in Number ID, in Number interval, in Color color, BeamType beamType) {
    LogToInspector($"coll checked! (ID: {ID}, CurrentTII: {currentTick}, interval: {interval}, TTE: {time})");
    for (fl_j = 1; fl_j <= rayCastCount; fl_j++) //how many raycasts to use/what raycast your on
    {

        tempPositions.StartPosition = projData[ID].PositionAtTime(LinearInterpolate(0, interval, (fl_j-1)/rayCastCount));
        tempPositions.EndPosition = projData[ID].PositionAtTime(LinearInterpolate(0, interval, fl_j/rayCastCount));
        //This will need to include targets in order for their objects to be tracked
        tempPositions.RaycastPosition = RayCastHitPosition(tempPositions.StartPosition, tempPositions.EndPosition, projData[ID].ReadOnly.Targets, null, true);
        Vector position: tempPositions.StartPosition;
        Vector endPosition: tempPositions.EndPosition;
        Vector raycast: tempPositions.RaycastPosition;


        //if (fl_j == 1)
        //{
        //    //Structuring the state check like this allows us to reuse the projs position instead of recalculating it
        //    StateCheck(ID, position);
        //}

        if (IsTrueForAny([position, endPosition, raycast], ArrayElement() == Vector.Zero)) {LogToInspector("!--POSITIONS REGISTERED ZERO--!");}

        CreateBeamEffect(HostPlayer(), beamType, position, raycast, Color.Red, EffectRev.None);
        projData[ID].ReadOnly.VFX.ModAppend(LastCreatedEntity());
        CreateEffect(HostPlayer(), Effect.Sphere, color, raycast, 0.25, EffectRev.None);
        projData[ID].ReadOnly.VFX.ModAppend(LastCreatedEntity());
        

//        if ([position, endPosition, raycast].IsTrueForAny(v => v == Vector.Zero)) {LogToInspector($"POSITIONS REGISTERED ZERO");}
        if (raycast != endPosition) 
        {
            ProjDestructor.Queue(ID, interval * LinearInterpolate(((fl_j-1)/rayCastCount), (fl_j/rayCastCount), (position.DistanceTo(raycast)/position.DistanceTo(endPosition)))); //Cant add an offset for visuals because it would mess up ricochets
            //LogToInspector($"Collided! (Proj ${ID} queued with ${interval * LinearInterpolate((fl_j-1)/rayCastCount, fl_j/rayCastCount, (position.DistanceTo(raycast)/position.DistanceTo(endPosition)))} time)");
            //break;
        } //stop raycasting if the latest one hit
    }
}

disabled rule: '[BMPW] Update State'
if (timeInInterval.Length)
{
    SpreadOverTicks(timeInInterval, 15, tte, i => {
        //i is the index of the array entered
        StateCheck(i.ID, projData[i.ID].Position);
        //LogToInspector($"Checked state of proj {i} (TTE: {time})");
    });
}

projDestructor.del
disabled rule: '[BMPW] Destructor - Remove Hanging Indices'
if (projData.Last.ProjState == ProjState.Inactive)
if (projData.Length > 1)
{
    Wait(0.016, WaitBehavior.AbortWhenFalse);

    //using as a temp var
    _waitlessIterator = (projData.Map(v => v.HitPlayer).Length - 1);
    Number last: _waitlessIterator;

    //projData_VFX.ModRemoveByIndex(last);

    //If the last index is inactive, remove it. Minimizes array size
    DestroyEffect(projData[last].ReadOnly.VFX);
    projData.ModRemoveByIndex(last);
    //LogToInspector($"\n\nRemoved hanging index\n\n");

    //Reset system if there are no active projectiles
    if (projData.Length == 1) {
        WipeData();
    }

    LogToInspector($"asdfasdf");
    
    LoopIfConditionIsTrue();
}