import "simpleProcessing.del";
globalvar Number _waitlessIterator;
globalvar Number[] complexProjs = EmptyArray();

rule: '[BMPW] Player Collision'
if (complexProjs.Length)
{
    Number ticks: 5;
    for (Number fl_i = 1; fl_i <= ticks; fl_i++)
    {
        Number startingIndexOfTick: LinearInterpolate(0, complexProjs.Length, (fl_i - 1)/ticks).Floor();
        Number endingIndexOfTick: LinearInterpolate(0, complexProjs.Length, fl_i/ticks).Floor() ;

        //If theres <= complex projs than ticks, just use the tick as the index to avoid bugs with the math
        if (complexProjs.Length >= fl_i)
        {
            //fl_i starts at index 1, not index 0, because its incrementing through ticks, which also start at index 1
            checkPCollision(complexProjs[fl_i - 1], ticks);
    
        }
        else
        {
            for (_waitlessIterator = startingIndexOfTick; _waitlessIterator < endingIndexOfTick; _waitlessIterator++)
            {
                checkPCollision(complexProjs[_waitlessIterator], ticks);
            }
        }
        //LogToInspector($"Checked tick {fl_i} (TTE: {TotalTimeElapsed()})\nstart: {startingIndexOfTick}\nend: {endingIndexOfTick}\nSize: {complexProjs.Length}");
        MinWait();
    }
    LoopIfConditionIsTrue();
}

private void checkPCollision(in Number ID, in Number ticks) {
    ProjData proj: projData[ID];
    projData[ID].HitPlayer = RayCastHitPlayer(proj.Position, proj.PositionAtTime(0.016*ticks), proj.ReadOnly.Targets, null, false);
    PlayEffect(HostPlayer(), PlayEffect.GoodExplosion, Color.White, proj.Position, 0.5);
    PlayEffect(HostPlayer(), PlayEffect.GoodExplosion, Color.White, proj.PositionAtTime(0.016*ticks), 0.5);
    if (proj.HitPlayer)
    {
        ProjDestructor.Destroy(ID);
        LogToInspector($"Proj {ID} hit {proj.HitPlayer}!");
    }
}

