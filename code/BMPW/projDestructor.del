import "structs.del";

globalvar ProjDestructor[] projDestructor = []; 

rule: '[BMPW] Destructor - Destruct Proj'
Event.OngoingGlobal
if (tte >= projDestructor.First.time && projDestructor.Length)
{
    Number ID: projDestructor.First.ID;

    DestroyEffect(projData_VFX[ID]);
    projData[ID].ProjState = ProjState.Inactive;
    complexProjs.ModRemoveByValue(ID);

    Boolean[] reqsForDec: [
    timeInInterval.Length > 1,
    currentTick >= timeInInterval[timeInInterval.Map(v => v.ID).IndexOf(ID)].Time,
    intervalIndex //make sure it isnt 0, because if it was it would go to index -1
];
    if (IsTrueForAll(reqsForDec, ArrayElement())) {LogToInspector($"Dec'd Index. (Index {timeInInterval.Map(v => v.ID).IndexOf(ID)} with ID {ID}, Index: {intervalIndex} -> {intervalIndex + 1})"); intervalIndex--;}
    TimeInInterval.ClearFromQueue(ID);

    //LogToInspector($"Destroyed Proj {ID} (Tick {(TotalTimeElapsed()/0.016).Floor()})");
    //Do this last, ID is tied to ProjDestructor
    ProjDestructor.ClearFromQueue(ID); 
    MinWait();

    LoopIfConditionIsTrue();
}

Any cond: projData.All(v => v.ProjState == ProjState.Inactive || !CurrentArrayIndex()) && projData.Length > 1; //If all real projectiles are Inactive
rule: '[BMPW] Destructor - Clear Projectile Data'
Event.OngoingGlobal
if (cond && !projConstructor.Length)
{
    Wait(0.25, WaitBehavior.AbortWhenFalse);
    DestroyEffect(projData_VFX);
    projData = [ProjData.Construct()];
    projData_VFX = [0];

    projConstructor = [];
    projDestructor = [];

    timeInInterval = [];
    intervalIndex = 0;

    complexProjs = [];
    
    lastProjectileID = 0;

    MinWait();
    LoopIfConditionIsTrue();
}