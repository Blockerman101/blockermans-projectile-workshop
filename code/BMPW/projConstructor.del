//import "../../../Other/extraFunctions.ostw";
import "structs.del";
import "simpleProcessing.del";
Vector | Number lerp2(in Vector | Number a, in Vector | Number b, in Number t, in Number tMax): ((tMax - t)/tMax)*a + (t/tMax)*b;
//lerp2(1, 5, 0.75, 1) = (1-0.75)*1 + (0.75)*5 = 0.25 + 3.75 = 4 "4 is 75% of the way from 1 to 5"
//lerp2(1, 5, 1, 2) = 1(2 - 1)/2 + 5(1/2) = 1(0.5) + 5(0.5) = 0.5 + 2.5 = 3 



globalvar Number lastProjectileID = 0;
globalvar ProjData[] projData = [ProjData.Construct()];
//globalvar (Number|Number[])[] projData_VFX = [null];
globalvar ProjectileArgs[] projConstructor = [];
//globalvar ProjectileArgs[] constructorData = [EmptyArray()];  //This var isnt be needed with 1 constructor, you can just ref `projConstructor.First`
globalvar TimeInInterval[] timeInInterval = [];

void CreateCustomProjectile(ProjectileArgs Args) "[BMPW] CreateProj Sub"
{
    //if (projData.Any(v => v.ProjState == ProjState.Inactive))
    if (IsTrueForAny(projData.Map(v => v.ProjState), ArrayElement() == ProjState.Inactive)) //Make new lastProjID
    {
        lastProjectileID = projData.Map(v => v.ProjState == ProjState.Inactive ? CurrentArrayIndex() : false).Filter(v => v).First;
    }
    else
    {
        lastProjectileID = projData.Length;
    }
    //Args.ProjID = lastProjectileID;
    Args._SetID(lastProjectileID);
    Args._SetTOC(tte);
    projData[lastProjectileID].ProjState = ProjState.NULL; //setting a projstate value so `lastProjectileID = projData.Length` increments correctly with >1 proj in a single tick
    

    //LogToInspector($"Last ID: {lastProjectileID}");
    projConstructor.ModAppend(Args); //Add this proj call to the construction queue

    //DEV
    //Args = null;
}

rule: '[BMPW] Constructor'
Event.OngoingGlobal
if (projConstructor.Length > 0)
{

    //LogToInspector("Constructor Fired!");
    ProjectileArgs Args: projConstructor.First;
    Any ID: Args._GetID();

    //deltaT is not the time since the last tick, but the time that passed since this proj was called
    //This is useful because instead of making the projectile at the current time, I can buffer it to act as if it was created at its time of call
    Number deltaT: (tte - Args._GetTOC()); 
    
    //ensure projectile has info
    if (CountOf(Args)) 
    {
        //Normalize dir internally (redundancy) //For reference, if you do .First instead of [0] OSTW throws an error
        projConstructor[0].Direction = projConstructor[0].Direction.Normalize();

        Number buffer: 0.016*2;
        projData[ID] = <ProjData> {
            //This is used as the reference for other time-based values, so by modifying this, you modify everything else
            //The lower this value is, the greater the time/position is
            //the 0.016*18 buffer is because of a weird bug involving TTE with createFX/createProjFX. Since TTE is referenced twice in the position macro, the TimeOfCreation needs to be buffered by 9 ticks, twice (0.288 = 0.016*9*2)
            
            TimeOfCreation:  Args._GetTOC() - buffer - (ServerLoadAverage() >= 200 ? 0.032 : 0.016),
            
            //RarelyChange: {
            //    Bezierp0: (Args.StartPosition), 
            //    Bezierp1: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) * 0.5, 
            //    Bezierp2: (Args.StartPosition) + (Args.Lifetime)*(Args.Speed * Args.Direction) + (Args.Lifetime)^2 * (Args.Gravity / 2),
            //    }, 

            ProjState: ProjState.Active, 

            ReadOnly: {
                InitPos: Args.StartPosition,
                Radius: 0,
                Targets: Args.Targets,
                Velocity: Args.Speed * Args.Direction,
                Gravity: Args.Gravity,
                VFX: null
                },

            //this is for testing, not intended for user
            HitPlayer: null
        };

        
        Number timeToMaxHeight: (tte + Max(0, -1 * Args.Speed * DotProduct(Args.Direction, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity)));
        Number ticksToMaxHeight: (((timeToMaxHeight%interval) / 0.016).Floor());
        TimeInInterval.Queue(ID, ticksToMaxHeight);
        //LogToInspector($"\nAdded to TII (ID: {ID})\nCurrentTick: {currentTick}, ProjTick: {ticksToMaxHeight}\nCurrentIndex: {intervalIndex}, ProjIndex: {timeInInterval.Map(v => v.ID).IndexOf(ID)}]\n");
        if (timeInInterval.Length > 1 && currentTick >= ticksToMaxHeight) {
            //LogToInspector($"Inc'd Index. (Index {timeInInterval.Map(v => v.ID).IndexOf(ID)} with ID {ID}, Index: {intervalIndex} -> {intervalIndex + 1})"); 
            intervalIndex++;
            }
        
        Wait(ServerLoadAverage() >= 200 ? 0.032 : 0.016);
        SyncTTE();
        CastPFX(
            pfx: Args.ProjFX,
            fx => {
                CreateProjectileEffect(AllPlayers(), fx, AllPlayers(), UpdateEveryFrame(projData[EvaluateOnce(ID)].Position), projData[EvaluateOnce(ID)].ReadOnly.Velocity + projData[EvaluateOnce(ID)].ReadOnly.Gravity * projData[EvaluateOnce(ID)].time, EvaluateOnce(Args.Oversize), ProjectileEffectReeval.PositionDirectionAndSize);
                }
        );
        //projData_VFX[ID] = LastCreatedEntity();
        projData[ID].ReadOnly.VFX = LastCreatedEntity();

        Number ModdedTimeToMaxHeight: Max(0, -1 * Args.Speed * DotProduct(Args.Direction, Args.Gravity)/DotProduct(Args.Gravity, Args.Gravity))%interval;
        simpleProcessing(ID, (!ModdedTimeToMaxHeight ? interval : ModdedTimeToMaxHeight), Color.SkyBlue, BeamType.GoodBeam); //First EC. If there is no TTMH (the proj is created past its apex), run a full interval EC check
        
        //First StateCheck. If the proj spawns close to a player, it should be in the complex state
        //StateCheck(ID, projData[ID].Position);
        
        ProjDestructor.Queue(ID, Args.Lifetime - deltaT);

        //If the server load is on the higher side, limit the constructor rate so THE BUG happens less
        Wait(ServerLoadAverage() >= 150 ? 0.032 : 0.016);
    
    }
    else
    {
        //This else will happen if a proj is queued without any info for args
        //LogToInspector("\n\n!--ELSE FIRED--!\n\n");
    }

    //All done with first in queue, get ready for next
    projConstructor.ModRemoveByIndex(0); 

    LoopIfConditionIsTrue();
    //LogToInspector($"NO LOOP ({projConstructor.Length} Con Queues)");
    MinWait();
    LoopIfConditionIsTrue();
}


void CastPFX(in ProjFX pfx, const ProjectileType => void cast)
{
    switch (pfx)
    {
        case ProjFX.BaptisteBioticLauncher:         cast(ProjectileType.BaptisteBioticLauncher);        break;
        case ProjFX.BastionA36TacticalGrenade:      cast(ProjectileType.BastionA36TacticalGrenade);     break;
        case ProjFX.EchoStickyBomb:                 cast(ProjectileType.EchoStickyBomb);                break;
        case ProjFX.GenjiShuriken:                  cast(ProjectileType.GenjiShuriken);                 break;
        case ProjFX.LucioSonicAmplifier:            cast(ProjectileType.LucioSonicAmplifier);           break;
        case ProjFX.MeiIcicle:                      cast(ProjectileType.MeiIcicle);                     break;
        case ProjFX.MercyCaduceusBlaster:           cast(ProjectileType.MercyCaduceusBlaster);          break;
        case ProjFX.MoiraDamageOrb:                 cast(ProjectileType.MoiraDamageOrb);                break;
        case ProjFX.MoiraHealOrb:                   cast(ProjectileType.MoiraHealOrb);                  break;
        case ProjFX.OrbProjectile:                  cast(ProjectileType.OrbProjectile);                 break;
        case ProjFX.OrisaFusionDriver:              cast(ProjectileType.OrisaFusionDriver);             break;
        case ProjFX.PharahRocket:                   cast(ProjectileType.PharahRocket);                  break;
        case ProjFX.RamattraRavenousVortexSphere:   cast(ProjectileType.RamattraRavenousVortexSphere);  break;
        case ProjFX.ReinhardtFireStrike:            cast(ProjectileType.ReinhardtFireStrike);           break;
        case ProjFX.RoadhogScrap:                   cast(ProjectileType.RoadhogScrap);                  break;
        case ProjFX.RoadhogScrapBall:               cast(ProjectileType.RoadhogScrapBall);              break;
        case ProjFX.SigmaHypersphere:               cast(ProjectileType.SigmaHypersphere);              break;
        case ProjFX.SymmetraPhotonProjector:        cast(ProjectileType.SymmetraPhotonProjector);       break;
        case ProjFX.ZaryaGraviton:                  cast(ProjectileType.ZaryaGraviton);                 break;
        case ProjFX.ZaryaParticleCannon:            cast(ProjectileType.ZaryaParticleCannon);           break;
    }
}