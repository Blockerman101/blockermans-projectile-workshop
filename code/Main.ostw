import "../customGameSettings.json";
import "../../../Other/extraFunctions.ostw";
import "projDestructor.del";
import "_flight.del";
import "_dev.del";
import "environmentCollision.del";
import "projConstructor.del";
import "structs.del";



disabled rule: 'Make my projectile'
Event.OngoingPlayer
if (toggle)
{
    
    ProjectileArgs args: {Lifetime: 1, ..ProjectileArgs.Default()};
    CreateCustomProjectile(args);
    Number myID = lastProjectileID;
    Wait(0.25);
    LoopIfConditionIsTrue();
}

playervar Boolean toggle;
disabled rule: 'Toggle the toggle'
Event.OngoingPlayer
if (_EP().IsButtonHeld(Button.Interact))
{
    toggle = !toggle;
}

rule: 'Make my steep projectile'
Event.OngoingPlayer
if (_EP().IsButtonHeld(Button.Interact))
{
    ProjectileArgs shortProj: {Lifetime: 1, ..ProjectileArgs.Default()};
    CreateCustomProjectile(shortProj);
    Number myID = lastProjectileID;
    Wait(0.5, WaitBehavior.AbortWhenFalse);
    LoopIfConditionIsTrue();
}
rule: 'Make big proj'
Event.OngoingPlayer
if (_EP().IsButtonHeld(Button.PrimaryFire))
{

    ProjectileArgs bigProj: {Oversize: 0.2, Speed: 50, Lifetime: 3, ..ProjectileArgs.Default()};
    CreateCustomProjectile(bigProj);
}

rule: 'Track helix rockets'
Event.OngoingPlayer
if (_EP().IsFiringSecondary())
{
    ProjectileArgs myArgs = {StartPosition: _EP().EyePosition(), Speed: 50, Gravity: Vector.Zero, Lifetime: 2, ..ProjectileArgs.Default()};
    CreateCustomProjectile(myArgs);
}

    Vector RandomSpread(Player player, Number deviation): (player.FacingDirection() * CosineFromDegrees(RandomReal(0, deviation)) + SineFromDegrees(RandomReal(0, deviation)) * (Right().AsWorldVector(player, Transformation.Rotation) * CosineFromDegrees(RandomReal(0, 360)) + CrossProduct(player.FacingDirection(), Left().AsWorldVector(player, Transformation.Rotation)) * SineFromDegrees(RandomReal(0, 360)))).Normalize();


//For an array of structs, you can filter/use a single value by doing structArray.Map(v => v.value)
//Arrays have to index linearly/incrementally. myArray = [5, 2, 4]; myArray[7] = 10; output: [5, 2, 4, 0, 0, 0, 0, 10]
//
//String => void message = text => BigMessage(AllPlayers(), text);
//String => void message                 | [argument data type] => [function return type] [function name]
// "="                                   | set the function 'message' to this
//text => BigMessage(AllPlayers(), text) | [argument name] => [expression]