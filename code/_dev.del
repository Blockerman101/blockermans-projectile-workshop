//import "../../../Other/extraFunctions.ostw";
import "BMPW/projDestructor.del";

void _CreateDevText(in String str) {CreateHudText(HostPlayer(), str, null, null, Location.Left);}
rule: '[DEV] Spawn Dummies'
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.Crouch) && HostPlayer().IsButtonHeld(Button.PrimaryFire))
{
    CreateDummyBot(AllHeroes().Random(), OppositeTeamOf(HostPlayer().Team()), -1, PositionOf(HostPlayer()));
}

rule: '[DEV] Destroy Dummies'
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.Crouch) && HostPlayer().IsButtonHeld(Button.SecondaryFire))
{
    DestroyAllDummyBots();
}

rule: '[DEV] Text'
{
    _CreateDevText("Load Avg: " + ServerLoadAverage());
    _CreateDevText("Data Array Size: " + projData.Length);
    _CreateDevText("Destructor Size: " + projDestructor.Length);
    _CreateDevText("TII: " + TotalTimeElapsed()%interval);
    _CreateDevText("[1] Time: " + timeInInterval.First.Time);
    _CreateDevText($"Entity Count: {EntityCount()}");
}



disabled rule: '[DEV] Log Data'
if (Not(projData.Length%5))
{
    LogToInspector($"{projData.Length}	{ServerLoadAverage()}\n");

}

rule: '[DEV] Show stuff'
{
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Blue, projData[1].Position, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Red, projData[1].TESTPositionWithBeziers, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Blue, projData[1].PositionAtTime(0.5), 1, EffectRev.VisibleToPositionRadiusAndColor);
}

disabled rule: '[DEV] Show ticks'
if (currentTick != EvaluateOnce(currentTick))
{
    LogToInspector($"Current Tick: {currentTick}");
    Wait(0.016, WaitBehavior.RestartWhenTrue);
    LoopIfConditionIsTrue();
}

globalvar Number count;
globalvar Number conCount;
disabled rule: '[DEV] show inactive projstate'
if (conCount != projConstructor.Length || count != projData.Map(v => v.ProjState).Filter(v => v == ProjState.Inactive).Length)
{
    count = projData.Map(v => v.ProjState).Filter(v => v == ProjState.Inactive).Length;
    conCount = projConstructor.Length;
    LogToInspector($"Size: {projData.Length} ({projData.Map(v => v.ProjState).Filter(v => v == ProjState.Active).Length} Active {count} Inactive {projData.Map(v => v.ProjState).Filter(v => v == ProjState.NULL).Length} Null)
    {projConstructor.Length} Con Requests");
    Wait(0.016, WaitBehavior.RestartWhenTrue);
    LoopIfConditionIsTrue();
}

disabled rule: '[DEV] show ticks'
if (projData.Length > 1)
{
    LogToInspector($"Tick {(TotalTimeElapsed()/0.016).Floor()}");
    MinWait();
    LoopIfConditionIsTrue();
}