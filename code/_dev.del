//import "../../../Other/extraFunctions.ostw";
import "BMPW/projDestructor.del";

void _CreateDevText(in String str) {CreateHudText(HostPlayer(), str, null, null, Location.Left);}
rule: '[DEV] Spawn Dummies'
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.Crouch) && HostPlayer().IsButtonHeld(Button.PrimaryFire))
{
    //CreateDummyBot(AllHeroes().Random(), OppositeTeamOf(HostPlayer().Team()), -1, PositionOf(HostPlayer()));
    CreateDummyBot(Hero.Reinhardt, OppositeTeamOf(HostPlayer().Team()), -1, PositionOf(HostPlayer()));
    LogToInspector($"{LastCreatedEntity()} Spawned");
    Wait(0.25);
    StartHoldingButton(LastCreatedEntity(), Button.SecondaryFire);
}

rule: '[DEV] Destroy Dummies'
Event.OngoingGlobal
if (HostPlayer().IsButtonHeld(Button.Crouch) && HostPlayer().IsButtonHeld(Button.SecondaryFire))
{
    DestroyAllDummyBots();
}

rule: '[DEV] Text'
{
    _CreateDevText($"tte: {tte}");
    CreateHudText(HostPlayer(), "Load Avg: " + ServerLoadAverage(), null, null, Location.Right, -1, ServerLoadAverage() >= 100 ? (ServerLoadAverage() >= 200 ? Color.Red : Color.Yellow) : Color.Green, null, null, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.DefaultVisibility);
    _CreateDevText("Data Array Size: " + projData.Length);
    _CreateDevText("Destructor Size: " + projDestructor.Length);
    _CreateDevText("TII: " + tte%interval);
    //_CreateDevText("[1] Time: " + timeInInterval.First.Time);
    _CreateDevText($"Entity Count: {EntityCount()}");
    //_CreateDevText($"Proj 1 Pos: {projData[1].Position}");
}



disabled rule: '[DEV] Log Data'
if (Not(projData.Length%5))
{
    LogToInspector($"{projData.Length}	{ServerLoadAverage()}\n");

}

rule: '[DEV] Show stuff'
{
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Blue, projData[1].Position, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Red, projData[1].TESTPositionWithBeziers, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    //CreateEffect(HostPlayer(), Effect.Sphere, Color.Blue, projData[1].PositionAtTime(0.5), 1, EffectRev.VisibleToPositionRadiusAndColor);
}

disabled rule: '[DEV] Show ticks'
if (currentTick != EvaluateOnce(currentTick))
{
    LogToInspector($"Current Tick: {currentTick}");
    Wait(0.016, WaitBehavior.RestartWhenTrue);
    LoopIfConditionIsTrue();
}

globalvar Number count;
globalvar Number conCount;
disabled rule: '[DEV] show inactive projstate'
if (conCount != projConstructor.Length || count != projData.Map(v => v.ProjState).Filter(v => v == ProjState.Inactive).Length)
{
    count = projData.Map(v => v.ProjState).Filter(v => v == ProjState.Inactive).Length;
    conCount = projConstructor.Length;
    LogToInspector($"Size: {projData.Length} ({projData.Map(v => v.ProjState).Filter(v => v == ProjState.Active).Length} Active {count} Inactive {projData.Map(v => v.ProjState).Filter(v => v == ProjState.NULL).Length} Null)
    {projConstructor.Length} Con Requests");
    Wait(0.016, WaitBehavior.RestartWhenTrue);
    LoopIfConditionIsTrue();
}

disabled rule: '[DEV] show ticks'
if (projData.Length > 1)
{
    LogToInspector($"Tick {(tte/0.016).Floor()}");
    MinWait();
    LoopIfConditionIsTrue();
}

disabled rule: '[DEV] show state criteria'
{
    for (Number fl_i = 1; fl_i <= 10; fl_i++)
    {
        Number ie: EvaluateOnce(fl_i);
        CreateEffect((projData[ie].ProjState == ProjState.Active) ? AllPlayers() : null, Effect.Sphere, complexProjs.Contains(ie) ? Color.Blue : Color.Red, pos(ie), rad(ie), EffectRev.VisibleToPositionRadiusAndColor);
        CreateEffect((projData[ie].ProjState == ProjState.Active) ? AllPlayers() : null, Effect.Sphere, Color.Red, projData[ie].Position, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
        //CreateEffect((projData[ie].ProjState == ProjState.Active) ? AllPlayers() : null, Effect.Sphere, Color.White, projData[ie].PositionAtTime(0.016), 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    
    }
}
globalvar Boolean slowmo;
rule: '[DEV] slowdown'
if (HostPlayer().IsButtonHeld(Button.Crouch))
{
    slowmo = !slowmo;
    if (slowmo) {
        SetSlowMotion(0);
    }
    else {
        SetSlowMotion(100);
    }
}

Player hp: HostPlayer();
rule: 'Create test proj'
if (hp.IsFiringSecondary())
{
    //Vector ogPos: (EvaluateOnce(EyePosition(hp) + 10 * WorldVectorOf(Forward(), hp, LocalVector.Rotation)) + Up() * 40 * (tte - EvaluateOnce(<Vector>tte)));
    StopCamera(hp);
    StartCamera(hp, projData[1].Position + hp.FacingDirection() * 3, projData[1].Position, 0);
    Wait(2);
    StopCamera(hp);
}